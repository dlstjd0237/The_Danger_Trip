//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.6.3
//     from Assets/08_InputSystem/PlayerInput.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @PlayerInput: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @PlayerInput()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""PlayerInput"",
    ""maps"": [
        {
            ""name"": ""Floor"",
            ""id"": ""60a1582c-6860-4fc0-bcc2-1d2089dcd067"",
            ""actions"": [
                {
                    ""name"": ""Move"",
                    ""type"": ""Button"",
                    ""id"": ""2648eaa6-07d9-413b-8d51-c9e10e42d022"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""PrresE"",
                    ""type"": ""Button"",
                    ""id"": ""5d235309-5f37-4e53-a0e6-ebcd0bb51c9b"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Look"",
                    ""type"": ""Value"",
                    ""id"": ""3e28e6db-2d7d-4bb5-b5fd-1ea0be3644ac"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Jump"",
                    ""type"": ""Button"",
                    ""id"": ""a50b8127-689a-47e5-9947-b40e0d3e741a"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""SprintOn"",
                    ""type"": ""Button"",
                    ""id"": ""280c24c3-ab19-43b7-b08b-1496e91fe997"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""SprintOff"",
                    ""type"": ""Button"",
                    ""id"": ""6d378c68-0f2b-49c5-a691-684042facf94"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": ""WASD"",
                    ""id"": ""dc334a2c-7f72-4c32-bdfe-3e71015745af"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""Up"",
                    ""id"": ""5738e395-bba0-4b42-93d6-1d8cd8248bff"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""Down"",
                    ""id"": ""7ed27e0f-830b-47a2-9d37-1750bfef182d"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""Left"",
                    ""id"": ""ca43c3dd-a219-464a-b00a-5803f6a6a791"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""Right"",
                    ""id"": ""7c328cea-676c-47ce-82ea-52582e175517"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""b7144ca5-741e-4eb6-9d62-94002a00b86f"",
                    ""path"": ""<Keyboard>/e"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""PrresE"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""9c8453c5-b02d-4cec-b999-673842f7e00e"",
                    ""path"": ""<Mouse>/delta"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Look"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""d2013199-cc35-4f8d-9538-7c30e213a5b5"",
                    ""path"": ""<Keyboard>/space"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Jump"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""e151eb8b-c9f5-4143-870f-5ff05ca980ba"",
                    ""path"": ""<Keyboard>/shift"",
                    ""interactions"": ""Press"",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""SprintOn"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""3034096f-56aa-4c3d-80f3-4a24161ad0a8"",
                    ""path"": ""<Keyboard>/shift"",
                    ""interactions"": ""Press(behavior=1)"",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""SprintOff"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""Interact"",
            ""id"": ""cb8069ea-8228-4ad8-9378-6ac78b77da84"",
            ""actions"": [
                {
                    ""name"": ""InteractOff"",
                    ""type"": ""Button"",
                    ""id"": ""3c80fc04-8ff5-43ff-b661-42bf0a6abc27"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""d901be7a-fee3-4bd5-a5d4-e23271e4a2ac"",
                    ""path"": ""<Keyboard>/anyKey"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""InteractOff"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""beb85640-9340-4c29-9c02-5c1c9c467774"",
                    ""path"": ""<Mouse>/press"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""InteractOff"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // Floor
        m_Floor = asset.FindActionMap("Floor", throwIfNotFound: true);
        m_Floor_Move = m_Floor.FindAction("Move", throwIfNotFound: true);
        m_Floor_PrresE = m_Floor.FindAction("PrresE", throwIfNotFound: true);
        m_Floor_Look = m_Floor.FindAction("Look", throwIfNotFound: true);
        m_Floor_Jump = m_Floor.FindAction("Jump", throwIfNotFound: true);
        m_Floor_SprintOn = m_Floor.FindAction("SprintOn", throwIfNotFound: true);
        m_Floor_SprintOff = m_Floor.FindAction("SprintOff", throwIfNotFound: true);
        // Interact
        m_Interact = asset.FindActionMap("Interact", throwIfNotFound: true);
        m_Interact_InteractOff = m_Interact.FindAction("InteractOff", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // Floor
    private readonly InputActionMap m_Floor;
    private List<IFloorActions> m_FloorActionsCallbackInterfaces = new List<IFloorActions>();
    private readonly InputAction m_Floor_Move;
    private readonly InputAction m_Floor_PrresE;
    private readonly InputAction m_Floor_Look;
    private readonly InputAction m_Floor_Jump;
    private readonly InputAction m_Floor_SprintOn;
    private readonly InputAction m_Floor_SprintOff;
    public struct FloorActions
    {
        private @PlayerInput m_Wrapper;
        public FloorActions(@PlayerInput wrapper) { m_Wrapper = wrapper; }
        public InputAction @Move => m_Wrapper.m_Floor_Move;
        public InputAction @PrresE => m_Wrapper.m_Floor_PrresE;
        public InputAction @Look => m_Wrapper.m_Floor_Look;
        public InputAction @Jump => m_Wrapper.m_Floor_Jump;
        public InputAction @SprintOn => m_Wrapper.m_Floor_SprintOn;
        public InputAction @SprintOff => m_Wrapper.m_Floor_SprintOff;
        public InputActionMap Get() { return m_Wrapper.m_Floor; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(FloorActions set) { return set.Get(); }
        public void AddCallbacks(IFloorActions instance)
        {
            if (instance == null || m_Wrapper.m_FloorActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_FloorActionsCallbackInterfaces.Add(instance);
            @Move.started += instance.OnMove;
            @Move.performed += instance.OnMove;
            @Move.canceled += instance.OnMove;
            @PrresE.started += instance.OnPrresE;
            @PrresE.performed += instance.OnPrresE;
            @PrresE.canceled += instance.OnPrresE;
            @Look.started += instance.OnLook;
            @Look.performed += instance.OnLook;
            @Look.canceled += instance.OnLook;
            @Jump.started += instance.OnJump;
            @Jump.performed += instance.OnJump;
            @Jump.canceled += instance.OnJump;
            @SprintOn.started += instance.OnSprintOn;
            @SprintOn.performed += instance.OnSprintOn;
            @SprintOn.canceled += instance.OnSprintOn;
            @SprintOff.started += instance.OnSprintOff;
            @SprintOff.performed += instance.OnSprintOff;
            @SprintOff.canceled += instance.OnSprintOff;
        }

        private void UnregisterCallbacks(IFloorActions instance)
        {
            @Move.started -= instance.OnMove;
            @Move.performed -= instance.OnMove;
            @Move.canceled -= instance.OnMove;
            @PrresE.started -= instance.OnPrresE;
            @PrresE.performed -= instance.OnPrresE;
            @PrresE.canceled -= instance.OnPrresE;
            @Look.started -= instance.OnLook;
            @Look.performed -= instance.OnLook;
            @Look.canceled -= instance.OnLook;
            @Jump.started -= instance.OnJump;
            @Jump.performed -= instance.OnJump;
            @Jump.canceled -= instance.OnJump;
            @SprintOn.started -= instance.OnSprintOn;
            @SprintOn.performed -= instance.OnSprintOn;
            @SprintOn.canceled -= instance.OnSprintOn;
            @SprintOff.started -= instance.OnSprintOff;
            @SprintOff.performed -= instance.OnSprintOff;
            @SprintOff.canceled -= instance.OnSprintOff;
        }

        public void RemoveCallbacks(IFloorActions instance)
        {
            if (m_Wrapper.m_FloorActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IFloorActions instance)
        {
            foreach (var item in m_Wrapper.m_FloorActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_FloorActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public FloorActions @Floor => new FloorActions(this);

    // Interact
    private readonly InputActionMap m_Interact;
    private List<IInteractActions> m_InteractActionsCallbackInterfaces = new List<IInteractActions>();
    private readonly InputAction m_Interact_InteractOff;
    public struct InteractActions
    {
        private @PlayerInput m_Wrapper;
        public InteractActions(@PlayerInput wrapper) { m_Wrapper = wrapper; }
        public InputAction @InteractOff => m_Wrapper.m_Interact_InteractOff;
        public InputActionMap Get() { return m_Wrapper.m_Interact; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(InteractActions set) { return set.Get(); }
        public void AddCallbacks(IInteractActions instance)
        {
            if (instance == null || m_Wrapper.m_InteractActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_InteractActionsCallbackInterfaces.Add(instance);
            @InteractOff.started += instance.OnInteractOff;
            @InteractOff.performed += instance.OnInteractOff;
            @InteractOff.canceled += instance.OnInteractOff;
        }

        private void UnregisterCallbacks(IInteractActions instance)
        {
            @InteractOff.started -= instance.OnInteractOff;
            @InteractOff.performed -= instance.OnInteractOff;
            @InteractOff.canceled -= instance.OnInteractOff;
        }

        public void RemoveCallbacks(IInteractActions instance)
        {
            if (m_Wrapper.m_InteractActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IInteractActions instance)
        {
            foreach (var item in m_Wrapper.m_InteractActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_InteractActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public InteractActions @Interact => new InteractActions(this);
    public interface IFloorActions
    {
        void OnMove(InputAction.CallbackContext context);
        void OnPrresE(InputAction.CallbackContext context);
        void OnLook(InputAction.CallbackContext context);
        void OnJump(InputAction.CallbackContext context);
        void OnSprintOn(InputAction.CallbackContext context);
        void OnSprintOff(InputAction.CallbackContext context);
    }
    public interface IInteractActions
    {
        void OnInteractOff(InputAction.CallbackContext context);
    }
}
